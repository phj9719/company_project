<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">                                                                                                            
<!--                                                                                                        
	/**                                                                                                       
	 *                                                                                                        
	 * WARNING: Auto create                                                                                   
	 * Template File Version : 1.0                                                                            
	 * Create :2017-07-27 10:11                                                                  
	 *                                                                                                        
	 **/                                                                                                      
	 *================================================================                  
     * 프로그램 ID  	: DAY00214                                                         
     * 프로그램 명     	: 2-14 감염예방일지                                                     
     * Description 	: 
     *================================================================                  
                작성일자         			|  작성자        |  비고                                    
     *================================================================                  
       2022-05-19 00:00        	|  이동관		| 최초작성                         

     *================================================================                      
     *  Statement List                                                                        
     *================================================================                      
        DAY00214_DS_LIST_S		조회                                                                                     
     *================================================================                      
-->
<mapper namespace="DAY00214">
	<!-- 조회 -->
    <select id="DAY00214_DS_LIST_S" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	/* 2-14 조회 */     
    <![CDATA[
	  WITH RECURSIVE day AS
	      (
	         SELECT 1 AS rnum
	         UNION ALL
	         SELECT rnum + 1 AS rnum
	         FROM day
	         WHERE rnum ]]><![CDATA[ < ]]><![CDATA[  1000
	      )
	      , daily AS
	      (
	         SELECT
	            a.date_ymd
	         ,   DATE_FORMAT(a.date_ymd, '%w') AS ddd
	         ,   a.date_ym
	         ,   CASE WHEN bi.예방번호 IS NOT NULL THEN '◑' ELSE NULL END AS 작성
	         ,   ROW_NUMBER() OVER(PARTITION BY a.date_ym ORDER BY a.date_ymd) AS rnum
	         ,   bi_ym_cnt.bi_ym_cnt
	         FROM
	         (
	            SELECT
	              #{date_to} - INTERVAL(a.rnum - 1) DAY AS date_ymd
                , DATE_FORMAT(#{date_to} - INTERVAL(a.rnum - 1) DAY, '%Y-%m') AS date_ym
	            FROM day a
	         ) AS a
	         LEFT JOIN base_infect bi
	         ON (a.date_ymd = bi.예방일 AND bi.sicode = #{sicode})
	         LEFT JOIN (SELECT sicode
						    , DATE_FORMAT(예방일, '%Y-%m') AS date_ym
						    , lpad(COUNT(*),2,'0') AS bi_ym_cnt
						    FROM base_infect
						    WHERE 예방일 BETWEEN #{date_from} AND #{date_to}
						    GROUP BY sicode
						    , DATE_FORMAT(예방일, '%Y%m')
							 ) bi_ym_cnt
			 ON (a.date_ym = bi_ym_cnt.date_ym AND bi_ym_cnt.sicode = #{sicode})
	         WHERE a.date_ymd BETWEEN #{date_from} AND #{date_to}
	      )
	      SELECT daily_cnt.jan 
	      ,		 daily_cnt.jan_wd
	      ,      CONCAT(daily_cnt.jan, '(', FN_CHANGE_DAY(daily_cnt.jan_wd), ')') AS jan_day
	      ,      daily_cnt.jan_c
	      ,      IFNULL(LPAD(CONVERT(daily_cnt.jan_cnt, CHAR(4)), '2', '0'), '  ') AS jan_cnt
	      ,      daily_cnt.feb
	      ,      daily_cnt.feb_wd
	      ,      CONCAT(daily_cnt.feb, '(', FN_CHANGE_DAY(daily_cnt.feb_wd), ')') AS feb_day
	      ,      daily_cnt.feb_c
	      ,      IFNULL(LPAD(CONVERT(daily_cnt.feb_cnt, CHAR(4)), '2', '0'), '  ') AS feb_cnt
	      ,      daily_cnt.mar
	      ,      daily_cnt.mar_wd
	      ,      CONCAT(daily_cnt.mar, '(', FN_CHANGE_DAY(daily_cnt.mar_wd), ')') AS mar_day
	      ,      daily_cnt.mar_c
	      ,      IFNULL(LPAD(CONVERT(daily_cnt.mar_cnt, CHAR(4)), '2', '0'), '  ') AS mar_cnt
	      ,      daily_cnt.apr
	      ,      daily_cnt.apr_wd
	      ,      CONCAT(daily_cnt.apr, '(', FN_CHANGE_DAY(daily_cnt.apr_wd), ')') AS apr_day
	      ,      daily_cnt.apr_c
	      ,      IFNULL(LPAD(CONVERT(daily_cnt.apr_cnt, CHAR(4)), '2', '0'), '  ') AS apr_cnt
	      ,      daily_cnt.may	      
	      ,      daily_cnt.may_wd
	      ,      CONCAT(daily_cnt.may, '(', FN_CHANGE_DAY(daily_cnt.may_wd), ')') AS may_day
	      ,      daily_cnt.may_c
	      ,      IFNULL(LPAD(CONVERT(daily_cnt.may_cnt, CHAR(4)), '2', '0'), '  ') AS may_cnt
	      ,      daily_cnt.jun
	      ,      daily_cnt.jun_wd
	      ,      CONCAT(daily_cnt.jun, '(', FN_CHANGE_DAY(daily_cnt.jun_wd), ')') AS jun_day
	      ,      daily_cnt.jun_c
	      ,      IFNULL(LPAD(CONVERT(daily_cnt.jun_cnt, CHAR(4)), '2', '0'), '  ') AS jun_cnt
	      ,      daily_cnt.jul
	      ,      daily_cnt.jul_wd
	      ,      CONCAT(daily_cnt.jul, '(', FN_CHANGE_DAY(daily_cnt.jul_wd), ')') AS jul_day
	      ,      daily_cnt.jul_c
	      ,		 IFNULL(LPAD(CONVERT(daily_cnt.jul_cnt, CHAR(4)), '2', '0'), '  ') AS jul_cnt
	      ,      daily_cnt.aug
	      ,      daily_cnt.aug_wd
	      ,      CONCAT(daily_cnt.aug, '(', FN_CHANGE_DAY(daily_cnt.aug_wd), ')') AS aug_day
	      ,      daily_cnt.aug_c
	      ,      IFNULL(LPAD(CONVERT(daily_cnt.aug_cnt, CHAR(4)), '2', '0'), '  ') AS aug_cnt
	      ,      daily_cnt.sep
	      ,      daily_cnt.sep_wd
	      ,      CONCAT(daily_cnt.sep, '(', FN_CHANGE_DAY(daily_cnt.sep_wd), ')') AS sep_day
	      ,      daily_cnt.sep_c
	      ,      IFNULL(LPAD(CONVERT(daily_cnt.sep_cnt, CHAR(4)), '2', '0'), '  ') AS sep_cnt
	      ,      daily_cnt.oct
	      ,      daily_cnt.oct_wd
	      ,      CONCAT(daily_cnt.oct, '(', FN_CHANGE_DAY(daily_cnt.oct_wd), ')') AS oct_day
	      ,      daily_cnt.oct_c
	      ,      IFNULL(LPAD(CONVERT(daily_cnt.oct_cnt, CHAR(4)), '2', '0'), '  ') AS oct_cnt
	      ,      daily_cnt.nov
	      ,      daily_cnt.nov_wd
	      ,      CONCAT(daily_cnt.nov, '(', FN_CHANGE_DAY(daily_cnt.nov_wd), ')') AS nov_day
	      ,      daily_cnt.nov_c
	      ,      IFNULL(LPAD(CONVERT(daily_cnt.nov_cnt, CHAR(4)), '2', '0'), '  ') AS nov_cnt
	      ,      daily_cnt.dec
	      ,      daily_cnt.dec_wd
	      ,      CONCAT(daily_cnt.dec, '(', FN_CHANGE_DAY(daily_cnt.dec_wd), ')') AS dec_day
	      ,      daily_cnt.dec_c
	      ,      IFNULL(LPAD(CONVERT(daily_cnt.dec_cnt, CHAR(4)), '2', '0'), '  ') AS dec_cnt
	      FROM (SELECT
	                rnum
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '01' THEN date_ymd END) AS 'jan'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '01' THEN ddd       END) AS 'jan_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '01' THEN 작성       END) AS 'jan_c'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '01' THEN bi_ym_cnt       END) AS 'jan_cnt'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '02' THEN date_ymd END) AS 'feb'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '02' THEN ddd       END) AS 'feb_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '02' THEN 작성       END) AS 'feb_c'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '02' THEN bi_ym_cnt       END) AS 'feb_cnt'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '03' THEN date_ymd END) AS 'mar'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '03' THEN ddd       END) AS 'mar_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '03' THEN 작성       END) AS 'mar_c'
	            ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '03' THEN bi_ym_cnt       END) AS 'mar_cnt'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '04' THEN date_ymd END) AS 'apr'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '04' THEN ddd       END) AS 'apr_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '04' THEN 작성       END) AS 'apr_c'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '04' THEN bi_ym_cnt       END) AS 'apr_cnt'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '05' THEN date_ymd END) AS 'may'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '05' THEN ddd       END) AS 'may_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '05' THEN 작성       END) AS 'may_c'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '05' THEN bi_ym_cnt       END) AS 'may_cnt'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '06' THEN date_ymd END) AS 'jun'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '06' THEN ddd       END) AS 'jun_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '06' THEN 작성       END) AS 'jun_c'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '06' THEN bi_ym_cnt       END) AS 'jun_cnt'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '07' THEN date_ymd END) AS 'jul'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '07' THEN ddd       END) AS 'jul_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '07' THEN 작성       END) AS 'jul_c'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '07' THEN bi_ym_cnt       END) AS 'jul_cnt'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '08' THEN date_ymd END) AS 'aug'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '08' THEN ddd       END) AS 'aug_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '08' THEN 작성       END) AS 'aug_c'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '08' THEN bi_ym_cnt       END) AS 'aug_cnt'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '09' THEN date_ymd END) AS 'sep'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '09' THEN ddd       END) AS 'sep_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '09' THEN 작성       END) AS 'sep_c'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '09' THEN bi_ym_cnt       END) AS 'sep_cnt'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '10' THEN date_ymd END) AS 'oct'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '10' THEN ddd       END) AS 'oct_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '10' THEN 작성       END) AS 'oct_c'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '10' THEN bi_ym_cnt       END) AS 'oct_cnt'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '11' THEN date_ymd END) AS 'nov'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '11' THEN ddd       END) AS 'nov_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '11' THEN 작성       END) AS 'nov_c'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '11' THEN bi_ym_cnt       END) AS 'nov_cnt'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '12' THEN date_ymd END) AS 'dec'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '12' THEN ddd       END) AS 'dec_wd'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '12' THEN 작성       END) AS 'dec_c'
		        ,   MAX(CASE WHEN SUBSTRING(date_ym, 6, 2) = '12' THEN bi_ym_cnt       END) AS 'dec_cnt'
		        FROM daily
		        GROUP BY rnum) AS daily_cnt
	]]>   													
    </select>
</mapper>                                                                                                                                                                                                          